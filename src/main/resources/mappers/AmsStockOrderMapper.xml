<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pbs.ams.web.mappers.AmsStockOrderMapper">
  <resultMap id="BaseResultMap" type="com.pbs.ams.web.model.AmsStockOrder">
    <id column="stock_order_id" jdbcType="BIGINT" property="stockOrderId" />
    <result column="contract_id" jdbcType="VARCHAR" property="contractId" />
    <result column="stock_order_status" jdbcType="TINYINT" property="stockOrderStatus" />
    <result column="stock_order_date" jdbcType="BIGINT" property="stockOrderDate" />
    <result column="knock_avg_price" jdbcType="DECIMAL" property="knockAvgPrice" />
    <result column="cancel_qty" jdbcType="INTEGER" property="cancelQty" />
    <result column="stock_order_type" jdbcType="TINYINT" property="stockOrderType" />
    <result column="ip_source" jdbcType="VARCHAR" property="ipSource" />
    <result column="mac_address" jdbcType="VARCHAR" property="macAddress" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
    <result column="operator_id" jdbcType="BIGINT" property="operatorId" />
  </resultMap>
  <sql id="Base_Column_List">
    stock_order_id, contract_id, stock_order_status, stock_order_date, knock_avg_price, 
    cancel_qty, stock_order_type, ip_source, mac_address, create_time, update_time, operator_id
  </sql>

  <!--查询委托列表-->
  <select id="selectAmsStockOrderWithDetail" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from ams_stock_order
    where 1 = 1
    <if test="dateStart != null and dateEnd != null" >
      and stock_order_date BETWEEN ${dateStart} AND ${dateEnd}
    </if>
    <if test="limit != null">
      <if test="offset != null"> limit ${offset}, ${limit} </if>
      <if test="offset == null"> limit ${limit} </if>
    </if>
  </select>

  <!--查询条目数-->
  <select id="selectAmsStockOrderWithDetailCount" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT
    COUNT(1)
    FROM ams_stock_order
    where 1 = 1
    <if test="dateStart != null and dateEnd != null" >
      and stock_order_date BETWEEN ${dateStart} AND ${dateEnd}
    </if>
  </select>


  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ams_stock_order
    where stock_order_id = #{stockOrderId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from ams_stock_order
    where stock_order_id = #{stockOrderId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.pbs.ams.web.model.AmsStockOrder">
    insert into ams_stock_order (stock_order_id, contract_id, stock_order_status, 
      stock_order_date, knock_avg_price, cancel_qty, 
      stock_order_type, ip_source, mac_address, 
      create_time, update_time, operator_id
      )
    values (#{stockOrderId,jdbcType=BIGINT}, #{contractId,jdbcType=VARCHAR}, #{stockOrderStatus,jdbcType=TINYINT}, 
      #{stockOrderDate,jdbcType=BIGINT}, #{knockAvgPrice,jdbcType=DECIMAL}, #{cancelQty,jdbcType=INTEGER}, 
      #{stockOrderType,jdbcType=TINYINT}, #{ipSource,jdbcType=VARCHAR}, #{macAddress,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT}, #{operatorId,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.pbs.ams.web.model.AmsStockOrder">
    insert into ams_stock_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="stockOrderId != null">
        stock_order_id,
      </if>
      <if test="contractId != null">
        contract_id,
      </if>
      <if test="stockOrderStatus != null">
        stock_order_status,
      </if>
      <if test="stockOrderDate != null">
        stock_order_date,
      </if>
      <if test="knockAvgPrice != null">
        knock_avg_price,
      </if>
      <if test="cancelQty != null">
        cancel_qty,
      </if>
      <if test="stockOrderType != null">
        stock_order_type,
      </if>
      <if test="ipSource != null">
        ip_source,
      </if>
      <if test="macAddress != null">
        mac_address,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="operatorId != null">
        operator_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="stockOrderId != null">
        #{stockOrderId,jdbcType=BIGINT},
      </if>
      <if test="contractId != null">
        #{contractId,jdbcType=VARCHAR},
      </if>
      <if test="stockOrderStatus != null">
        #{stockOrderStatus,jdbcType=TINYINT},
      </if>
      <if test="stockOrderDate != null">
        #{stockOrderDate,jdbcType=BIGINT},
      </if>
      <if test="knockAvgPrice != null">
        #{knockAvgPrice,jdbcType=DECIMAL},
      </if>
      <if test="cancelQty != null">
        #{cancelQty,jdbcType=INTEGER},
      </if>
      <if test="stockOrderType != null">
        #{stockOrderType,jdbcType=TINYINT},
      </if>
      <if test="ipSource != null">
        #{ipSource,jdbcType=VARCHAR},
      </if>
      <if test="macAddress != null">
        #{macAddress,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="operatorId != null">
        #{operatorId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.pbs.ams.web.model.AmsStockOrder">
    update ams_stock_order
    <set>
      <if test="contractId != null">
        contract_id = #{contractId,jdbcType=VARCHAR},
      </if>
      <if test="stockOrderStatus != null">
        stock_order_status = #{stockOrderStatus,jdbcType=TINYINT},
      </if>
      <if test="stockOrderDate != null">
        stock_order_date = #{stockOrderDate,jdbcType=BIGINT},
      </if>
      <if test="knockAvgPrice != null">
        knock_avg_price = #{knockAvgPrice,jdbcType=DECIMAL},
      </if>
      <if test="cancelQty != null">
        cancel_qty = #{cancelQty,jdbcType=INTEGER},
      </if>
      <if test="stockOrderType != null">
        stock_order_type = #{stockOrderType,jdbcType=TINYINT},
      </if>
      <if test="ipSource != null">
        ip_source = #{ipSource,jdbcType=VARCHAR},
      </if>
      <if test="macAddress != null">
        mac_address = #{macAddress,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="operatorId != null">
        operator_id = #{operatorId,jdbcType=BIGINT},
      </if>
    </set>
    where stock_order_id = #{stockOrderId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pbs.ams.web.model.AmsStockOrder">
    update ams_stock_order
    set contract_id = #{contractId,jdbcType=VARCHAR},
      stock_order_status = #{stockOrderStatus,jdbcType=TINYINT},
      stock_order_date = #{stockOrderDate,jdbcType=BIGINT},
      knock_avg_price = #{knockAvgPrice,jdbcType=DECIMAL},
      cancel_qty = #{cancelQty,jdbcType=INTEGER},
      stock_order_type = #{stockOrderType,jdbcType=TINYINT},
      ip_source = #{ipSource,jdbcType=VARCHAR},
      mac_address = #{macAddress,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      operator_id = #{operatorId,jdbcType=BIGINT}
    where stock_order_id = #{stockOrderId,jdbcType=BIGINT}
  </update>
  <insert id="insertIntoAmsStockOrderSnaps">
    insert into ams_stock_order_snaps SELECT CAST(DATE_FORMAT(CURRENT_TIMESTAMP(3),'%Y%m%d%H%i%S%f')/1000 AS UNSIGNED),tb.* from ams_stock_order as tb where stock_order_id= #{stock_order_id}
  </insert>
  <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />
</mapper>